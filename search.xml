<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/4a17b156.html"/>
      <url>/posts/4a17b156.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>物品栏</title>
      <link href="/posts/ddbc7825.html"/>
      <url>/posts/ddbc7825.html</url>
      
        <content type="html"><![CDATA[<h2 id="提醒一下"><a href="#提醒一下" class="headerlink" title="提醒一下"></a>提醒一下</h2>  <div class="tip warning faa-horizontal animated-hover"><p>本教程相当于是我在写笔记</p></div>   <div class="tag link"><a class="link-card" title="北山的图文教程" href="https://beishanair.github.io/2024/07/23/start121/"><div class="left"><img src="/img/siteicon/64.png"/></div><div class="right"><p class="text">北山的图文教程</p><p class="url">https://beishanair.github.io/2024/07/23/start121/</p></div></a></div><ul><li><p>在遇到问题的时候可以选择，先阅读fabricmc官网的文档</p><div class="tag link"><a class="link-card" title="fabricmc" href="https://docs.fabricmc.net/zh_cn/develop/"><div class="left"><img src="/img/siteicon/64.png"/></div><div class="right"><p class="text">fabricmc</p><p class="url">https://docs.fabricmc.net/zh_cn/develop/</p></div></a></div></li><li><p>以及通过工具如AI,chatGPT去搜索一下，或者去必应一下</p></li><li>也可以先去b站搜索一下，b站上有很多大佬，可以去学习一下</li><li>本教程适用于Minecraft 1.21 Fabric的模组开发，不是Java教程。在开始之前也请先学习Java，具有一定的Java基础后再来学习</li><li>在此真诚感谢北山大佬的模组开发教程<div class="tag link"><a class="link-card" title="北山模组教程" href="https://www.bilibili.com/video/BV1Bf421B7XS/"><div class="left"><img src="/img/siteicon/64.png"/></div><div class="right"><p class="text">北山模组教程</p><p class="url">https://www.bilibili.com/video/BV1Bf421B7XS/</p></div></a></div></li></ul><h1 id="什么是物品栏？"><a href="#什么是物品栏？" class="headerlink" title="什么是物品栏？"></a>什么是物品栏？</h1><p>我们来说说什么是物品栏,好的下图就是物品栏,再见(hh</p><p><img src="https://web-jidutianxia-tlias.oss-cn-chengdu.aliyuncs.com/image-20241113172555316.png" alt=""></p><p>玩过一些中大型mod内容基本上都知道,创造界面在原版基础上,mod物品大多数都不是在原版物品栏,如材料,方块等中里面的</p><p>而是在原版GUI界面变化出的翻页中里面拥有,mod自己图标,名字的物品栏</p><p>我这节学的就是如何实现上图</p><h1 id="Fabric-API方法"><a href="#Fabric-API方法" class="headerlink" title="Fabric API方法"></a>Fabric API方法</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Fabric API提供了能将我们的物品加入原版物品栏的方法，本质上使用的是Mixin。</p><p>不过，一旦你的模组里面使用了Fabric API，那么你的模组就需要这个API运行，打包之后放到真正的游戏中就要安装Fabric API。</p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>Fabric API提供了一个<code>FabricItemGroupEntries</code>类，<br>我们先将物品加入到这个entries中，再由<code>ItemGroupEvents</code>添加至原版物品栏</p><h3 id="添加物品"><a href="#添加物品" class="headerlink" title="添加物品"></a>添加物品</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">addItemToIG</span><span class="params">(FabricItemGroupEntries fabricItemGroupEntries)</span>&#123;</span><br><span class="line">    fabricItemGroupEntries.add(ICE_ETHER);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们先创建一个方法，将我们的物品加入到entries中。</p><p>这个方法目的就是给你的新建的一个物品栏取个名字</p><h3 id="添加至原版物品栏"><a href="#添加至原版物品栏" class="headerlink" title="添加至原版物品栏"></a>添加至原版物品栏</h3><p>然后我们将之前创建的物品加入到entries中，这里我们使用的是<code>ICE_ETHER</code>也就是上面取的名。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ItemGroupEvents.modifyEntriesEvent(ItemGroups.INGREDIENTS).register(ModItems::addItemToIG);</span><br></pre></td></tr></table></figure><p>在之前写的初始化方法<code>registerModItems</code>中添加这一行代码，这样我们的物品就会被加入到原版的材料物品栏中。</p><p><code>modifyEntriesEvent</code>方法的参数是一个<code>ItemGroup</code>，这里我们使用的是<code>ItemGroups.INGREDIENTS</code>，这个是原版的材料物品栏。<br>具体其他的物品栏可以查看<code>ItemGroups</code>类。（注意，你需要genSource才能够正确调用<code>ItemGroups</code>中的字段）</p><p>后面的<code>register</code>方法直接引用我们之前创建的方法即可。</p><ol><li><strong>注册事件监听器</strong>：<ul><li><code>ItemGroupEvents.modifyEntriesEvent(ItemGroups.INGREDIENTS).register(ModItems::addItemToIG);</code></li><li>这行代码注册了一个事件监听器，当“原料”物品组的内容需要被修改时，<code>addItemToIG</code> 方法会被调用。</li></ul></li><li><strong>事件触发</strong>：<ul><li>当 Minecraft 游戏需要修改“原料”物品组的内容时，事件处理机制会调用所有注册的回调函数。</li><li>在这种情况下，<code>addItemToIG</code> 方法会被调用，并传入一个 <code>FabricItemGroupEntries</code> 对象。</li></ul></li><li><strong>方法调用</strong>：<ul><li><code>addItemToIG</code> 方法的签名是 <code>private static void addItemToIG(FabricItemGroupEntries fabricItemGroupEntries)</code>。</li><li>事件处理机制会自动传入一个 <code>FabricItemGroupEntries</code> 对象，这个对象包含了当前物品组的所有条目。</li><li>在 <code>addItemToIG</code> 方法中，你可以对这个 <code>FabricItemGroupEntries</code> 对象进行操作，例如添加新的物品。</li><li>这个静态方法引用说简单点就是，省略了一个接受 <code>FabricItemGroupEntries</code> 参数的函数的基础上再直接引用了一个<code>ModItems</code> 类的静态<code>addItemToIG</code> 方法。</li></ul></li></ol><h2 id="举一反三"><a href="#举一反三" class="headerlink" title="举一反三"></a>举一反三</h2><p>那如果说我现在还有一个物品，想加入到原版的杂项（MISC）物品栏中，应该怎么做呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">addItemToIG2</span><span class="params">(FabricItemGroupEntries fabricItemGroupEntries)</span>&#123;</span><br><span class="line">    fabricItemGroupEntries.add(FIRE_ETHER);</span><br><span class="line">    fabricItemGroupEntries.add(WATER_ETHER);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们再创建一个方法，与之前的方法类似，将我们的物品加入到entries中。</p><p>添加多个物品直接用<code>add</code>方法即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ItemGroupEvents.modifyEntriesEvent(ItemGroups.MISC).register(ModItems::addItemToIG2);</span><br></pre></td></tr></table></figure><p>那么同样的，使用不同的物品栏，只需要将<code>ItemGroups.INGREDIENTS</code>替换成<code>ItemGroups.MISC</code>即可。</p><p>然后再引用<code>addItemToIG2</code>方法即可。`</p><h1 id="原版方法"><a href="#原版方法" class="headerlink" title="原版方法"></a>原版方法</h1><h2 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h2><p>使用Fabric API并不能创建自定义的物品栏，只能将物品加入到原版的物品栏中。<br>所以说如果想要创建自定义的物品栏，还是需要使用原版的方法。</p><h2 id="查看源代码"><a href="#查看源代码" class="headerlink" title="查看源代码"></a>查看源代码</h2><p>我们先来看看原版是如何添加物品到物品栏的。上面也提到过了，原版物品栏的注册在<code>ItemGroups</code>类中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java</span><br><span class="line">public static final RegistryKey&lt;ItemGroup&gt; INGREDIENTS = ItemGroups.register(&quot;ingredients&quot;);</span><br></pre></td></tr></table></figure><p>首先我们看到它的注册，这里使用的是<code>ItemGroups.register</code>方法，这个方法是一个静态方法，返回一个<code>RegistryKey&lt;ItemGroup&gt;</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">java</span><br><span class="line">private static RegistryKey&lt;ItemGroup&gt; register(String id) &#123;</span><br><span class="line">    return RegistryKey.of(RegistryKeys.ITEM_GROUP, Identifier.ofVanilla(id));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看着这个方法的返回语句，是否和之前物品的注册有些类似呢？是的没错，同样的，<code>Identifier</code>要我们自行更改</p><p>那么除此之外，还有什么要注意的呢？我们可以看到<code>registerAndGetDefault</code>方法中一堆的<code>entries.add(...)</code></p><p>那么这些东西便是将物品加入到物品栏的方法了</p><ul><li>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">java</span><br><span class="line">Registry.register(registry, INGREDIENTS, </span><br><span class="line">    ItemGroup.create(ItemGroup.Row.BOTTOM, 3)</span><br><span class="line">    .displayName(Text.translatable(&quot;itemGroup.ingredients&quot;))</span><br><span class="line">    .icon(() -&gt; new ItemStack(Items.IRON_INGOT))</span><br><span class="line">    .entries((displayContext, entries) -&gt; &#123;</span><br><span class="line">            ...</span><br><span class="line">    &#125;).build());</span><br></pre></td></tr></table></figure></li></ul><ul><li>这里我们以<code>INGREDIENTS</code>为例，我们可以看到它使用的是<code>Registry.register</code>方法，这个方法是用来注册物品栏的</li><li>但是首先我们得知道这个<code>registry</code>应该写什么，其实它就是<code>Registries.ITEM_GROUP</code>，这个是原版的物品栏注册器</li><li>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public static final Registry&lt;ItemGroup&gt; ITEM_GROUP = Registries.create(RegistryKeys.ITEM_GROUP, ItemGroups::registerAndGetDefault);</span><br></pre></td></tr></table></figure><ul><li>create(RegistryKeys.ITEM_GROUP, ItemGroups::registerAndGetDefault)：使用 create 方法创建一个注册表。</li><li>RegistryKeys.ITEM_GROUP：这是注册表的键，表示物品组注册表。</li><li>ItemGroups::registerAndGetDefault：这是一个方法引用，表示 ItemGroups 类中的 registerAndGetDefault 方法。当注册表需要初始化时，会调用这个方法来注册默认的物品组并返回该物品组。</li></ul></li><li><p>我们在<code>Registries</code>类中可以看到，<code>ITEM_GROUP</code>是一个<code>Registry&lt;ItemGroup&gt;</code>类型的常量，创建的时候使用的是<code>registerAndGetDefault</code>方法</p></li><li><p>而我们自己写的时候直接使用<code>Registries.ITEM_GROUP</code>即可</p></li><li><p>那么接下来，我们看到<code>INGREDIENTS</code>的第二个参数是<code>INGREDIENTS</code>，这个是一个<code>RegistryKey&lt;ItemGroup&gt;</code>类型的常量，这个是物品栏的ID</p></li><li><p>然后我们看到<code>ItemGroup.create</code>方法，这个方法是用来创建物品栏的，里面有一些参数，比如<code>ItemGroup.Row.BOTTOM</code>，这个是指物品栏所在的位置，这里的<code>BOTTOM</code>表示它在GUI的下面那行中，<code>3</code>是指在第4个；<br>那么其他的还有<code>ItemGroup.Row.TOP</code>，这个是指在GUI的上面那行中</p></li><li><p>我们接着看<code>displayName</code>方法，这个是用来设置物品栏的名字的，这里使用的是<code>Text.translatable</code>方法，这个方法是用来设置物品栏名字的，这里使用的是<code>itemGroup.ingredients</code>，这个是一个翻译键，我们可以在语言文件中找到这个翻译键，然后设置物品栏的名字</p></li><li><p>然后我们看<code>icon</code>方法，这个是用来设置物品栏的图标的，这里使用的是<code>Items.IRON_INGOT</code>，这个是物品栏的图标，这里使用的是铁锭</p></li><li><p><code>entries</code>方法是用来设置物品栏的物品的，这里使用的是一个lambda表达式，这个lambda表达式有两个参数，<br>一个是<code>displayContext</code>，一个是<code>entries</code>，这个<code>displayContext</code>是用来设置物品栏的显示的，这里没有用到，<br><code>entries</code>是用来设置物品栏的物品的，这里的东西省略了，我们就不展开了</p></li></ul><h3 id="创建ModItemGroups类"><a href="#创建ModItemGroups类" class="headerlink" title="创建ModItemGroups类"></a>创建ModItemGroups类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ModItemGroups</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注册方法"><a href="#注册方法" class="headerlink" title="注册方法"></a>注册方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> RegistryKey&lt;ItemGroup&gt; <span class="title function_">register</span><span class="params">(String id)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> RegistryKey.of(RegistryKeys.ITEM_GROUP, Identifier.of(TutorialMod.MOD_ID, id));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么<code>Identifier</code>同样的还是要改</p><h3 id="注册物品栏Key"><a href="#注册物品栏Key" class="headerlink" title="注册物品栏Key"></a>注册物品栏Key</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> RegistryKey&lt;ItemGroup&gt; TUTORIAL_GROUP = register(<span class="string">&quot;tutorial_group&quot;</span>);</span><br></pre></td></tr></table></figure><p>这里的都是仿照原版在编写</p><h3 id="初始化注册方法"><a href="#初始化注册方法" class="headerlink" title="初始化注册方法"></a>初始化注册方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">registerModItemGroups</span><span class="params">()</span> &#123;</span><br><span class="line">        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不要忘记到主类调用这个初始化方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java</span><br><span class="line">ModItemGroups.registerModItemGroups();</span><br></pre></td></tr></table></figure><h3 id="注册物品栏"><a href="#注册物品栏" class="headerlink" title="注册物品栏"></a>注册物品栏</h3><p>这个语句直接写在初始化注册方法中就好了，这样在模组初始化时就可以注册完成</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">java</span><br><span class="line">Registry.register(Registries.ITEM_GROUP, TUTORIAL_GROUP,</span><br><span class="line">                ItemGroup.create(ItemGroup.Row.TOP, 7)</span><br><span class="line">                                .displayName(Text.translatable(&quot;itemGroup.tutorial_group&quot;))</span><br><span class="line">                                        .icon(() -&gt; new ItemStack(ModItems.ICE_ETHER))</span><br><span class="line">                        .entries((displayContext, entries) -&gt; &#123;</span><br><span class="line">                            entries.add(ModItems.ICE_ETHER);</span><br><span class="line">                        &#125;).build());</span><br></pre></td></tr></table></figure><p>这个就是和原版一模一样的语句，不同的地方在于第一个参数我们直接用了<code>Registries.ITEM_GROUP</code></p><p>而<code>ItemGroup.create</code>方法里面的参数，不要和原版重叠（虽然我没试过会发生什么），然后具体的位置其实可以在确定有多少个物品栏之后再写。<br>实际情况是，如果前面空着，比如说我里面的参数写<code>8</code>，但<code>7</code>的位置没有东西，那么你新增的物品栏的位置还是<code>7</code>。<code>TOP</code>和<code>BOTTOM</code>同理，前者补完补后者</p><h3 id="简化？YES"><a href="#简化？YES" class="headerlink" title="简化？YES"></a>简化？YES</h3><p>是不是觉得还是很复杂？能不能简化呢？当然可以（不过有个弊端，后面dataGen跑语言文件生成的时候就不能直接调写的KEY了，不过直接复制<code>displayName</code>也一样）</p><p>这里我们就要利用返回值为<code>ItemGroup</code>这个特性，还记得源代码里面<code>registerAndGetDefault</code>方法的返回值吗？没错，它就是<code>ItemGroup</code></p><p>所以在这里，我们依旧可以选择让它修饰为和<code>Item</code>一样的<code>static final</code>，利用初始化完成注册</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">java</span><br><span class="line">public static final ItemGroup TUTORIAL_GROUP = Registry.register(Registries.ITEM_GROUP, Identifier.of(TutorialMod.MOD_ID, &quot;tutorial_group&quot;),</span><br><span class="line">        ItemGroup.create(null, -1).displayName(Text.translatable(&quot;itemGroup.tutorial_group&quot;))</span><br><span class="line">                .icon(() -&gt; new ItemStack(ModItems.ICE_ETHER))</span><br><span class="line">                .entries((displayContext, entries) -&gt; &#123;</span><br><span class="line">                    entries.add(ModItems.ICE_ETHER);</span><br><span class="line">                    entries.add(Blocks.BRICKS);</span><br><span class="line">                    entries.add(Items.DIAMOND);</span><br><span class="line">                &#125;).build());</span><br></pre></td></tr></table></figure><p>中间的<code>Identifier</code>直接写你的<code>MOD_ID</code>和<code>id</code>即可</p><p>然后我这里的<code>ItemGroup.create</code>直接使用<code>null</code>和<code>-1</code>，这个就直接让它填在最后一个位置上，如果你使用<code>FabricItemGroup</code>进行创建，它就是这样写的</p><p>这样就可以简化很多，另外你也可以添加原版中有的物品，比如<code>Blocks.BRICKS</code>和<code>Items.DIAMOND</code>，这样就可以直接添加原版的物品了</p><p>不过，初始化方法还是要写的，也记得在主类中调用这个初始化方法</p><h3 id="整体代码"><a href="#整体代码" class="headerlink" title="整体代码"></a>整体代码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">java</span><br><span class="line">public class ModItemGroups &#123;</span><br><span class="line">//    public static final RegistryKey&lt;ItemGroup&gt; TUTORIAL_GROUP = register(&quot;tutorial_group&quot;);</span><br><span class="line">//    private static RegistryKey&lt;ItemGroup&gt; register(String id) &#123;</span><br><span class="line">//        return RegistryKey.of(RegistryKeys.ITEM_GROUP, Identifier.of(TutorialMod.MOD_ID, id));</span><br><span class="line">//    &#125;</span><br><span class="line">//    public static void registerModItemGroups() &#123;</span><br><span class="line">//        Registry.register(Registries.ITEM_GROUP, TUTORIAL_GROUP,</span><br><span class="line">//                ItemGroup.create(ItemGroup.Row.TOP, 7)</span><br><span class="line">//                                .displayName(Text.translatable(&quot;itemGroup.tutorial_group&quot;))</span><br><span class="line">//                                        .icon(() -&gt; new ItemStack(ModItems.ICE_ETHER))</span><br><span class="line">//                        .entries((displayContext, entries) -&gt; &#123;</span><br><span class="line">//                            entries.add(ModItems.ICE_ETHER);</span><br><span class="line">//                        &#125;).build());</span><br><span class="line">//        TutorialMod.LOGGER.info(&quot;Registering Item Groups&quot;);</span><br><span class="line">//    &#125;</span><br><span class="line">    </span><br><span class="line">    public static final ItemGroup TUTORIAL_GROUP = Registry.register(Registries.ITEM_GROUP, Identifier.of(TutorialMod.MOD_ID, &quot;tutorial_group&quot;),</span><br><span class="line">        ItemGroup.create(null, -1).displayName(Text.translatable(&quot;itemGroup.tutorial_group&quot;))</span><br><span class="line">                .icon(() -&gt; new ItemStack(ModItems.ICE_ETHER))</span><br><span class="line">                .entries((displayContext, entries) -&gt; &#123;</span><br><span class="line">                    entries.add(ModItems.ICE_ETHER);</span><br><span class="line">                    entries.add(Blocks.BRICKS);</span><br><span class="line">                    entries.add(Items.DIAMOND);</span><br><span class="line">                &#125;).build());</span><br><span class="line">    </span><br><span class="line">    public static void registerModItemGroups() &#123;</span><br><span class="line">        TutorialMod.LOGGER.info(&quot;Registering Item Groups&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="语言文件"><a href="#语言文件" class="headerlink" title="语言文件"></a>语言文件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">json</span><br><span class="line">&#123;</span><br><span class="line">  &quot;itemGroup.tutorial_group&quot;: &quot;Tutorial Group&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个就是我们的物品栏的名字，这里的<code>itemGroup.tutorial_group</code>就是我们在<code>displayName</code>方法中设置的翻译键</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>现在我们启动游戏，由于原版的物品栏已经填满了第一页，不过它会自动生成一个翻页符，我们点击翻页符，就可以看到我们的物品栏了</p>]]></content>
      
      
      <categories>
          
          <category> Minecraft </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Minecraft </tag>
            
            <tag> 1.21.1模组开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一个物品</title>
      <link href="/posts/8cc5805c.html"/>
      <url>/posts/8cc5805c.html</url>
      
        <content type="html"><![CDATA[<h2 id="提醒一下"><a href="#提醒一下" class="headerlink" title="提醒一下"></a>提醒一下</h2>  <div class="tip warning faa-horizontal animated-hover"><p>本教程相当于是我在写笔记</p></div>   <div class="tag link"><a class="link-card" title="北山的图文教程" href="https://beishanair.github.io/2024/07/23/start121/"><div class="left"><img src="/img/siteicon/64.png"/></div><div class="right"><p class="text">北山的图文教程</p><p class="url">https://beishanair.github.io/2024/07/23/start121/</p></div></a></div><ul><li><p>在遇到问题的时候可以选择，先阅读fabricmc官网的文档</p><div class="tag link"><a class="link-card" title="fabricmc" href="https://docs.fabricmc.net/zh_cn/develop/"><div class="left"><img src="/img/siteicon/64.png"/></div><div class="right"><p class="text">fabricmc</p><p class="url">https://docs.fabricmc.net/zh_cn/develop/</p></div></a></div></li><li><p>以及通过工具如AI,chatGPT去搜索一下，或者去必应一下</p></li><li><p>也可以先去b站搜索一下，b站上有很多大佬，可以去学习一下</p></li><li><p>本教程适用于Minecraft 1.21 Fabric的模组开发，不是Java教程。在开始之前也请先学习Java，具有一定的Java基础后再来学习</p></li><li><p>在此真诚感谢北山大佬的模组开发教程</p><div class="tag link"><a class="link-card" title="北山模组教程" href="https://www.bilibili.com/video/BV1Bf421B7XS/"><div class="left"><img src="/img/siteicon/64.png"/></div><div class="right"><p class="text">北山模组教程</p><p class="url">https://www.bilibili.com/video/BV1Bf421B7XS/</p></div></a></div></li></ul><h2 id="什么是物品"><a href="#什么是物品" class="headerlink" title="什么是物品"></a>什么是物品</h2><p>像这个一格一格我们都可以统称物品,不管是方块物品还是普通物品都是物品<br><img src="https://web-jidutianxia-tlias.oss-cn-chengdu.aliyuncs.com/image-20241113172802407.png" alt="image-20241113172802407"></p><p>这节我们先实现在原版物品栏中添加物品</p><h2 id="查找源代码"><a href="#查找源代码" class="headerlink" title="查找源代码"></a>查找源代码</h2><p>首先创建第一个物品最先要做的得是什么<br>怎么创建对吧</p><p>就好比sout打印<code>Hello World</code>一样，至少你得认识哪个是打印<br>java可以看API文档，我们Minecraft可以看<code>wiki</code>看<code>源代码</code></p><p>既然在IDEA中我们可以就近选择看<code>源代码</code>即翻我们的<code>外部库</code>或者<code>双击Shift键</code>，从而弹出<code>全局搜索框</code></p><p>外部库里面<code>Gradle: net.minecraft:minecraft-merged-4eb0fe4bb6:1.21-net.fabricmc.yarn.1_21.1.21+build.1-v2</code></p><h3 id="Items类"><a href="#Items类" class="headerlink" title="Items类"></a>Items类</h3><p>首先，我们来查看<code>Items</code>这个类(注意是Minecraft包中的类）。这个类是Minecraft中所有物品的注册的类。</p><p><img src="https://web-jidutianxia-tlias.oss-cn-chengdu.aliyuncs.com/50991010-f4b0-4476-a6ae-43e4fda26d22.png" alt="50991010-f4b0-4476-a6ae-43e4fda26d22"></p><p>随便挑几个简单的来讲，比如第二，三个字段<code>STONE</code>，<code>GRANITE</code>即mc里面的<code>石头</code>和<code>花岗岩</code></p><p>这两个字段通过<code>register</code>这个方法来进行注册,里面的形参简单的都是些<code>Blocks.XX</code>简单易懂的命名都是一些将方块注册成物品</p><h3 id="Item类"><a href="#Item类" class="headerlink" title="Item类"></a>Item类</h3><p>这些字段都是一个<code>Item</code>类，这个类是物品的基类，也就是说这个类是定义所有物品都会有的属性和方法的类。<br>而特殊的物品也是继承这个类的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Item</span> <span class="keyword">implements</span> <span class="title class_">ToggleableFeature</span>, ItemConvertible, FabricItem &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">LOGGER</span> <span class="operator">=</span> LogUtils.getLogger();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;Block, Item&gt; BLOCK_ITEMS = Maps.&lt;Block, Item&gt;newHashMap();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Identifier</span> <span class="variable">BASE_ATTACK_DAMAGE_MODIFIER_ID</span> <span class="operator">=</span> Identifier.ofVanilla(<span class="string">&quot;base_attack_damage&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Identifier</span> <span class="variable">BASE_ATTACK_SPEED_MODIFIER_ID</span> <span class="operator">=</span> Identifier.ofVanilla(<span class="string">&quot;base_attack_speed&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_MAX_COUNT</span> <span class="operator">=</span> <span class="number">64</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAX_MAX_COUNT</span> <span class="operator">=</span> <span class="number">99</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">ITEM_BAR_STEPS</span> <span class="operator">=</span> <span class="number">13</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RegistryEntry.Reference&lt;Item&gt; registryEntry = Registries.ITEM.createEntry(<span class="built_in">this</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ComponentMap components;</span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Item recipeRemainder;</span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="keyword">private</span> String translationKey;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> FeatureSet requiredFeatures;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">LOGGER</span> <span class="operator">=</span> LogUtils.getLogger();</span><br></pre></td></tr></table></figure><ul><li><code>LOGGER</code>：一个静态的 <code>Logger</code> 对象，用于记录日志信息。<code>LogUtils.getLogger()</code> 是一个获取日志记录器的方法。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;Block, Item&gt; BLOCK_ITEMS = Maps.&lt;Block, Item&gt;newHashMap();</span><br></pre></td></tr></table></figure><ul><li><code>BLOCK_ITEMS</code>：一个静态的 <code>Map</code>，键是 <code>Block</code> 对象，值是 <code>Item</code> 对象。这个映射用于存储块（Block）和对应的物品（Item）之间的关系。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Identifier</span> <span class="variable">BASE_ATTACK_DAMAGE_MODIFIER_ID</span> <span class="operator">=</span> Identifier.ofVanilla(<span class="string">&quot;base_attack_damage&quot;</span>);</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Identifier</span> <span class="variable">BASE_ATTACK_SPEED_MODIFIER_ID</span> <span class="operator">=</span> Identifier.ofVanilla(<span class="string">&quot;base_attack_speed&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li><p><code>BASE_ATTACK_DAMAGE_MODIFIER_ID</code> 和 <code>BASE_ATTACK_SPEED_MODIFIER_ID</code>：两个静态的 <code>Identifier</code> 对象，分别表示基础攻击力和基础攻击速度的标识符。<code>Identifier.ofVanilla</code> 方法用于创建一个标准的标识符。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_MAX_COUNT</span> <span class="operator">=</span> <span class="number">64</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAX_MAX_COUNT</span> <span class="operator">=</span> <span class="number">99</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">ITEM_BAR_STEPS</span> <span class="operator">=</span> <span class="number">13</span>;</span><br></pre></td></tr></table></figure><ul><li><code>DEFAULT_MAX_COUNT</code>：默认的最大堆叠数量，通常是 64。</li><li><code>MAX_MAX_COUNT</code>：最大允许的最大堆叠数量，通常是 99。</li><li><code>ITEM_BAR_STEPS</code>：物品栏中的步数，通常用于显示物品的耐久度等信息。</li></ul></li></ul><p>在Minecraft中，带<code>s</code>的复数形式的类一般是用于<code>register</code>注册的类，比如我们之后会讲的<code>Blocks</code>、<code>ItemGroups</code>等;<br>而不带<code>s</code>的类一般是用于定义的类，比如我们之后会讲的<code>Block</code>等。</p><h3 id="register注册"><a href="#register注册" class="headerlink" title="register注册"></a>register注册</h3><p>看这个注册方块物品，大家肯定都意识到了我们不是注册物品吗</p><p>对，所以我们得看一个简单的原材料物品来加深我们的认识，例如<code>DIAMOND</code>即<code>钻石</code></p><p>我们通过<code>Ctrl</code>+<code>F</code>查找快捷键来查找diamond,通过代码的命名我们可以排除不是想找的物品</p><p>最终我们锁定在第<code>919</code>行</p><p><img src="https://web-jidutianxia-tlias.oss-cn-chengdu.aliyuncs.com/image-20241111113619107.png" alt="image-20241111113619107"></p><p>来到这个我们发现还是有<code>register</code>这个方法看来是逃不掉了，那我们可以按住<code>Ctrl</code>+<code>鼠标左键</code>查看<code>register</code>注册方法来弄懂如何注册物品的</p><p><img src="https://web-jidutianxia-tlias.oss-cn-chengdu.aliyuncs.com/image-20241111115513235.png" alt="image-20241111115513235"></p><p>我们跳转到这个类的末尾，我们目前先只需要关注2019行下面的，上面都是方块的一些注册吧<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Item <span class="title function_">register</span><span class="params">(String id, Item item)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> register(Identifier.ofVanilla(id), item);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Item <span class="title function_">register</span><span class="params">(Identifier id, Item item)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> register(RegistryKey.of(Registries.ITEM.getKey(), id), item);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Item <span class="title function_">register</span><span class="params">(RegistryKey&lt;Item&gt; key, Item item)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (item <span class="keyword">instanceof</span> BlockItem) &#123;</span><br><span class="line">       ((BlockItem)item).appendBlocks(Item.BLOCK_ITEMS, item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Registry.register(Registries.ITEM, key, item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>仔细看上面三个方法</p><p>下面是对每个方法的详细解析：</p><h4 id="1-register-String-id-Item-item"><a href="#1-register-String-id-Item-item" class="headerlink" title="1. register(String id, Item item)"></a>1. <code>register(String id, Item item)</code></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Item <span class="title function_">register</span><span class="params">(String id, Item item)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> register(Identifier.ofVanilla(id), item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>参数</p><ul><li><code>id</code>：一个字符串，表示物品的唯一标识符。</li><li><code>item</code>：要注册的 <code>Item</code> 对象。</li></ul></li><li><p>功能</p><ul><li><p>将字符串 <code>id</code> 转换为 <code>Identifier</code> 对象，然后调用 <code>register(Identifier id, Item item)</code> 方法进行注册。</p></li><li><p><code>Identifier.ofVanilla(id)</code>：创建一个标准的 <code>Identifier</code> 对象，通常用于游戏中的资源标识。</p></li><li><p>```java<br>public static Identifier ofVanilla(String path) {</p><pre><code>return new Identifier(&quot;minecraft&quot;, validatePath(&quot;minecraft&quot;, path));</code></pre><p>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### 2. `register(Identifier id, Item item)`</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">public static Item register(Identifier id, Item item) &#123;</span><br><span class="line">    return register(RegistryKey.of(Registries.ITEM.getKey(), id), item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>参数</p><ul><li><code>id</code>：一个 <code>Identifier</code> 对象，表示物品的唯一标识符。</li><li><code>item</code>：要注册的 <code>Item</code> 对象。</li></ul></li><li><p>功能</p><ul><li>将 <code>Identifier</code> 对象转换为 <code>RegistryKey&lt;Item&gt;</code> 对象，然后调用 <code>register(RegistryKey&lt;Item&gt; key, Item item)</code> 方法进行注册。</li><li><code>RegistryKey.of(Registries.ITEM.getKey(), id)</code>：创建一个 <code>RegistryKey&lt;Item&gt;</code> 对象，用于在注册表中标识物品。</li><li>关于<code>Identifier</code> 对象可以在类中详细注释，包括但不限于<namespace>:<path>只能使用小写字母、数字、部分字符</li></ul></li></ul><h4 id="3-register-RegistryKey-lt-Item-gt-key-Item-item"><a href="#3-register-RegistryKey-lt-Item-gt-key-Item-item" class="headerlink" title="3. register(RegistryKey&lt;Item&gt; key, Item item)"></a>3. <code>register(RegistryKey&lt;Item&gt; key, Item item)</code></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Item <span class="title function_">register</span><span class="params">(RegistryKey&lt;Item&gt; key, Item item)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (item <span class="keyword">instanceof</span> BlockItem) &#123;</span><br><span class="line">        ((BlockItem)item).appendBlocks(Item.BLOCK_ITEMS, item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Registry.register(Registries.ITEM, key, item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>参数</li></ul><ul><li><code>key</code>：一个 <code>RegistryKey&lt;Item&gt;</code> 对象，表示物品在注册表中的唯一标识。</li><li><code>item</code>：要注册的 <code>Item</code> 对象。</li></ul><ul><li>功能</li></ul><ul><li>检查 <code>item</code> 是否是 <code>BlockItem</code> 的实例。如果是，则调用 <code>appendBlocks</code> 方法将该物品添加到 <code>BLOCK_ITEMS</code> 映射中。</li><li><code>((BlockItem)item).appendBlocks(Item.BLOCK_ITEMS, item)</code>：将 <code>item</code> 添加到 <code>BLOCK_ITEMS</code> 映射中，以便后续使用。</li><li>最后，调用 <code>Registry.register(Registries.ITEM, key, item)</code> 方法将物品注册到注册表中。</li><li><code>Registry.register(Registries.ITEM, key, item)</code>：将 <code>item</code> 对象注册到 <code>Registries.ITEM</code> 注册表中，并返回注册后的 <code>Item</code> 对象。</li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li>注册流程</li></ul><ol><li><code>register(String id, Item item)</code>：将字符串 <code>id</code> 转换为 <code>Identifier</code>，然后调用 <code>register(Identifier id, Item item)</code>。</li><li><code>register(Identifier id, Item item)</code>：将 <code>Identifier</code> 转换为 <code>RegistryKey&lt;Item&gt;</code>，然后调用 <code>register(RegistryKey&lt;Item&gt; key, Item item)</code>。</li><li><code>register(RegistryKey&lt;Item&gt; key, Item item)</code>：检查 <code>item</code> 是否是 <code>BlockItem</code>，如果是则将其添加到 <code>BLOCK_ITEMS</code> 映射中，最后将 <code>item</code> 注册到 <code>Registries.ITEM</code> 注册表中。</li><li><code>Item</code>是一直没有变的</li><li>从后往前看就是<img src="https://web-jidutianxia-tlias.oss-cn-chengdu.aliyuncs.com/image-20241111153533618.png" alt="image-20241111153533618"></li></ol><h2 id="物品注册"><a href="#物品注册" class="headerlink" title="物品注册"></a>物品注册</h2><h3 id="ModItems"><a href="#ModItems" class="headerlink" title="ModItems"></a>ModItems</h3><p>懂清楚之后我们创建一个类开始我们的注册</p><p>首先创建一个包<code>item</code>，存放在mod名文件夹下</p><p>创建一个<code>ModItems</code>类，用于注册我们的物品。</p><p>然后我们来写注册方法，如果你不想整合上面的那三个方法，可以直接把上面的代码复制到ModItems类中。</p><p>不过我还是来给它整合一下，毕竟这样更加简洁一点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ModItems</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Item <span class="title function_">registerItems</span><span class="params">(String id, Item item)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Registry.register(Registries.ITEM, RegistryKey.of(Registries.ITEM.getKey(), Identifier.ofVanilla(id)), item);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于<code>Registry</code>接口中<code>register</code>方法中的各个参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> &lt;V, T <span class="keyword">extends</span> <span class="title class_">V</span>&gt; T <span class="title function_">register</span><span class="params">(Registry&lt;V&gt; registry, RegistryKey&lt;V&gt; key, T entry)</span> &#123;</span><br><span class="line">    ((MutableRegistry)registry).add(key, (V)entry, RegistryEntryInfo.DEFAULT);</span><br><span class="line">    <span class="keyword">return</span> entry;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法的第一个参数是<code>Registry</code>，第二个参数是<code>RegistryKey</code>，第三个参数是<code>entry</code>。</p><p>而对应到我们自己的方法中，第一个参数是<code>Registries.ITEM</code>，它是一个<code>DefaultedRegistry&lt;Item&gt;</code>类型的常量，在<code>Registries</code>类中定义。<br>这个类是Minecraft中所有的注册表的类，后续我们还会讲到<code>Registries.BLOCK</code>、<code>Registries.ITEM_GROUP</code>等。</p><p>第二个参数是<code>RegistryKey.of(Registries.ITEM.getKey(), Identifier.ofVanilla(id))</code>，<br>这个方法是为注册表中的某个值创建注册表键值，同时创建根注册表中持有值注册表的注册表键值和值的标识符。<br>不过这里的<code>Identifier</code>我们待会着重会讲</p><p>第三个参数是<code>item</code>。也是我们后面会进行编写的物品的一些基本设置。</p><h3 id="Identifier"><a href="#Identifier" class="headerlink" title="Identifier"></a>Identifier</h3><p><code>Identifier</code>是一个极其重要的类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">An identifier used to identify things. This is also known as &quot;resource location&quot;, &quot;namespaced ID&quot;, &quot;location&quot;, or just &quot;ID&quot;. </span><br><span class="line"></span><br><span class="line">Format</span><br><span class="line">Identifiers are formatted as &lt;namespace&gt;:&lt;path&gt;. If the namespace and colon are omitted, the namespace defaults to &quot;minecraft&quot;.</span><br></pre></td></tr></table></figure><p>这是<code>Identifier</code>的注释，说白了，它就是我们常说的<code>命名空间</code> + <code>id</code>（我们自己物品、方块或者其他东西的），或者说一些特定文件的路径</p><p>这里的<code>format</code>是<code>&lt;namespace&gt;:&lt;path&gt;</code>，如果省略了命名空间和冒号，那么命名空间默认为<code>minecraft</code></p><p>而再往下，重点的注释是这个</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">The namespace and path must contain only ASCII lowercase letters ([a-z]), ASCII digits ([0-9]), or the characters _, ., and -.</span><br><span class="line">The path can also contain the standard path separator /.</span><br></pre></td></tr></table></figure><p>这里说的是命名空间和路径只能包含<code>ASCII小写字母[a-z]</code>、<code>ASCII数字[0-9]</code>、<code>下划线[_]</code>、<code>点[.]</code>和<code>短横线[-]</code>。<br>而路径还可以包含标准路径分隔符<code>/</code>。而你一旦写了其他的非法字符，启动游戏就会直接崩溃，并抛出<code>net.minecraft.util.InvalidIdentifierException: Non [a-z0-9_.-] ...</code>异常。</p><p>而什么黑紫块、找不到文件、无法显示等等，都是因为命名空间和路径的问题，那些东西要重点检查。</p><p>现在我们看到自己代码中的<code>Identifier.ofVanilla(id)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Identifier <span class="title function_">ofVanilla</span><span class="params">(String path)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Identifier</span>(<span class="string">&quot;minecraft&quot;</span>, validatePath(<span class="string">&quot;minecraft&quot;</span>, path));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以看到，这里的<code>ofVanilla</code>方法，它的命名空间是<code>minecraft</code>。<br>这不是我们希望看到的，我们的模组最好能够有独立的命名空间，<br>而且如果你的命名空间是<code>minecraft</code>，那么你的物品、方块等等资源文件都得放在<code>minecraft</code>文件夹下，<br>这样可能会和原版资源文件冲突（如果你的物品和原版物品同名的话）。</p><p>幸好，<code>Identifier</code>还有一个构造方法，我们可以自己定义命名空间</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Identifier <span class="title function_">of</span><span class="params">(String namespace, String path)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> ofValidated(namespace, path);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法就是我们自己定义命名空间的方法，我们可以自己定义一个命名空间，还记得我们的MODID吗？<code>tutorialmod</code>在这里就可以用上了。</p><h2 id="重新整合注册方法"><a href="#重新整合注册方法" class="headerlink" title="重新整合注册方法"></a>重新整合注册方法</h2><p>那么现在我们就重新写一下那个注册方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Item <span class="title function_">registerItems</span><span class="params">(String id, Item item)</span> &#123;</span><br><span class="line">    <span class="comment">// 由原版整合的方法</span></span><br><span class="line"><span class="keyword">return</span> Registry.register(Registries.ITEM, RegistryKey.of(Registries.ITEM.getKey(), Identifier.of(TutorialMod.MOD_ID, name)), item);</span><br></pre></td></tr></table></figure><p>这样的话，命名空间就是我们自己定义的<code>tutorialmod</code>，而不是<code>minecraft</code>了。<br>而这个方法也就可以使用了。</p><p>不过，你是否觉得这个方法还是有点繁琐，毕竟有点长对吧？<br>那么其实我们还可以进一步简化，采用<code>Registry.register</code>的另一个同名不同参的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Item <span class="title function_">registerItems</span><span class="params">(String name, Item item)</span> &#123;</span><br><span class="line">        <span class="comment">// 采用register的另一个方法</span></span><br><span class="line">        <span class="keyword">return</span> Registry.register(Registries.ITEM, Identifier.of(TutorialMod.MOD_ID, id), item);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>而这个<code>register</code>方法调用的是我们前面写的那个<code>register</code>方法，本质上是一样的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> &lt;V, T <span class="keyword">extends</span> <span class="title class_">V</span>&gt; T <span class="title function_">register</span><span class="params">(Registry&lt;V&gt; registry, Identifier id, T entry)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> register(registry, RegistryKey.of(registry.getKey(), id), entry);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>中间的<code>RegistryKey</code>方法就是我们前面写的那个<code>RegistryKey</code>方法，而这里的<code>register</code>方法是<code>Blocks</code>注册用的，我们后面会讲到。</p><h2 id="注册物品"><a href="#注册物品" class="headerlink" title="注册物品"></a>注册物品</h2><p>经过了一系列铺垫，我们终于可以开始写我们的物品了。但是在写之前，我们还是要先看看<code>DIAMOND</code>这个物品是怎么注册的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Item</span> <span class="variable">DIAMOND</span> <span class="operator">=</span> register(<span class="string">&quot;diamond&quot;</span>, <span class="keyword">new</span> <span class="title class_">Item</span>(<span class="keyword">new</span> <span class="title class_">Item</span>.Settings()));</span><br></pre></td></tr></table></figure><p>我们可以看到，<code>DIAMOND</code>的注册中，实例化了一个<code>Item</code>对象，而这个<code>Item</code>对象的构造方法中传入了一个<code>Item.Settings</code>对象。<br>这里的Item.Settings是一个物品的设置类，我们可以在这个类中设置物品的一些属性。</p><p>这里的diamond是个最简单的物品，没有什么特殊的属性，所以直接传入一个<code>Item.Settings</code>对象即可。</p><p>后续会讲到的<code>最大耐久值（maxDamage）</code>、<code>最大堆叠数（maxCount）</code>、<code>抗火特性（fireproof）</code>等等，都是在这个Settings中设置的。感兴趣的话可以自己先去看看其他的一些物品的设置。</p><p>另外，这里也可以提一点，上面的这些设置，最终都会被转换成<code>组件（Component）</code>的形式进行储存，这个组件的前身便是我们熟知的<code>NBT</code>，只是高版本的<code>NBT</code>变成了<code>Component</code>。</p><p>好了，我们现在就来写我们的物品。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Item</span> <span class="variable">ICE_ETHER</span> <span class="operator">=</span> registerItems(<span class="string">&quot;ice_ether&quot;</span>, <span class="keyword">new</span> <span class="title class_">Item</span>(<span class="keyword">new</span> <span class="title class_">Item</span>.Settings()));</span><br></pre></td></tr></table></figure><p>这里的<code>ICE_ETHER</code>是我们的物品，延用1.20的东西，<code>ice_ether</code>是我们的物品的id<code>（记好了，不能有非法字符）</code>，<code>new Item(new Item.Settings())</code>是我们的物品的实例化对象。<br>物品的设置我们暂时也没有，所以就和<code>DIAMOND</code>一样，简单写一下即可</p><h2 id="初始化方法"><a href="#初始化方法" class="headerlink" title="初始化方法"></a>初始化方法</h2><p>那好了，注册完了吗？当然没有，因为我们的这个类还没有被初始化，启动游戏也没有用的。</p><p>这里我们需要一个初始化方法，并在主类中调用这个初始化方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">registerModItems</span><span class="params">()</span>&#123;</span><br><span class="line">        TutorialMod.LOGGER.info(<span class="string">&quot;Registering Items&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这个方法就是我们的初始化方法，这里写了一个日志输出，用于在启动游戏的时候输出一些信息。其实这个方法空着也没事</p><p>然后到我们主类中的<code>onInitialize</code>调用这个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ModItems.registerModItems();</span><br></pre></td></tr></table></figure><p>这里的<code>onInitialize</code>方法是在游戏启动的时候被调用的，所以我们在这里调用我们的初始化方法。</p><p>这也是利用Java的特性，当我们调用一个类的方法的时候，这个类会被初始化。而这个类的静态代码块也会被初始化，<br>而我们的物品是<code>static final</code>即静态常量修饰的，所以在这个时候，我们的物品也就完成了注册。</p><h2 id="整体代码"><a href="#整体代码" class="headerlink" title="整体代码"></a>整体代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ModItems</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Item</span> <span class="variable">ICE_ETHER</span> <span class="operator">=</span> registerItems(<span class="string">&quot;ice_ether&quot;</span>, <span class="keyword">new</span> <span class="title class_">Item</span>(<span class="keyword">new</span> <span class="title class_">Item</span>.Settings()));</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Item <span class="title function_">registerItems</span><span class="params">(String id, Item item)</span>&#123;</span><br><span class="line"><span class="comment">//        return Registry.register(Registries.ITEM, RegistryKey.of(Registries.ITEM.getKey(), Identifier.of(TutorialMod.MOD_ID, id)), item);</span></span><br><span class="line">        <span class="keyword">return</span> Registry.register(Registries.ITEM, Identifier.of(TutorialMod.MOD_ID, id), item);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">registerModItems</span><span class="params">()</span>&#123;</span><br><span class="line">        TutorialMod.LOGGER.info(<span class="string">&quot;Registering Items&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="资源文件"><a href="#资源文件" class="headerlink" title="资源文件"></a>资源文件</h1><p>那么我们的物品注册完了，但是我们现在进入游戏会发现一个黑紫块，所以我们还需要它的资源文件，包括模型文件、语言文件和贴图文件。</p><h2 id="模型文件"><a href="#模型文件" class="headerlink" title="模型文件"></a>模型文件</h2><p>我们先来写模型文件，我们可以先看原版的物品模型文件，然后修改一下。比如说这个<code>diamond.json</code>文件</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;parent&quot;</span><span class="punctuation">:</span> <span class="string">&quot;minecraft:item/generated&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;textures&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;layer0&quot;</span><span class="punctuation">:</span> <span class="string">&quot;minecraft:item/diamond&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>稍加改动，我们就可以得到我们的物品模型文件，<br>路径是<code>src/main/resources/assets/tutorialmod/models/item/ice_ether.json</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;parent&quot;</span><span class="punctuation">:</span> <span class="string">&quot;minecraft:item/generated&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;textures&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;layer0&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tutorialmod:item/ice_ether&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="语言文件"><a href="#语言文件" class="headerlink" title="语言文件"></a>语言文件</h2><p>然后我们来写语言文件，<br>我们可以先看原版的物品语言文件，然后修改一下。比如说这个<code>en_us.json</code>文件</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;item.minecraft.diamond&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Diamond&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>稍加改动，我们就可以得到我们的物品语言文件，<br>路径是<code>src/main/resources/assets/tutorialmod/lang/en_us.json</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;item.tutorialmod.ice_ether&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Ice Ether&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>那么<code>en_us</code>是英文（美式）语言文件，也是默认情况下会使用的语言文件。也就是说假设你的游戏是中文的，但缺失了中文的语言文件，它会采用英文的语言文件进行显示。</p><p>如果你要支持其他语言，可以在这个文件夹下新建一个文件，<br>比如简体中文是<code>zh_cn.json</code>，然后把<code>en_us.json</code>的内容复制过去，然后翻译一下就行了。</p><p>假设说你不写语言文件，那么游戏会直接显示物品的注册名，也就是<code>item.tutorialmod.ice_ether</code>这一串。</p><h2 id="贴图文件"><a href="#贴图文件" class="headerlink" title="贴图文件"></a>贴图文件</h2><p>这个的话就拿PS这种软件画一个贴图就行了，然后放到<code>src/main/resources/assets/tutorialmod/textures/item</code>文件夹下</p><p>贴图文件的名字要和模型文件中的<code>layer0</code>的值一样，不然游戏会找不到贴图文件，导致物品显示不出来。</p><p>不过值得注意的是，贴图的格式要是<code>PNG</code>格式，不然无法加载，分辨率推荐2的n次方，比如16x16、32x32、64x64等等。<br>不要取个诡异的分辨率，比如说17x17，虽然不会报错，但会有警告</p><p>不想自己画就拿这里的好了</p><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>那么我们现在就可以启动游戏了，看看我们的物品是否注册成功。<br>因为我们的物品并没有加入到任何物品栏中，所以我们也只能使用指令去获取这个物品。</p><p>使用<code>/give</code>命令来给自己一个物品，看看是否显示正常。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/give @s tutorialmod:ice_ether</span><br></pre></td></tr></table></figure><p>如果你能够得到一个带有正确材质的物品，那么恭喜你，你的物品注册成功了</p><p>[<img src="https://web-jidutianxia-tlias.oss-cn-chengdu.aliyuncs.com/success.jpg" alt="success">]</p><p>另外，在常规开发过程中，<code>/give</code>命令可以用来测试物品、方块的注册情况。因为它一旦注册成功，那么就可以通过这个命令来获取这个物品。</p>]]></content>
      
      
      <categories>
          
          <category> Minecraft </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Minecraft </tag>
            
            <tag> 1.21.1模组开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开发环境构建以及配置</title>
      <link href="/posts/4f8ebe18.html"/>
      <url>/posts/4f8ebe18.html</url>
      
        <content type="html"><![CDATA[<h2 id="提醒一下"><a href="#提醒一下" class="headerlink" title="提醒一下"></a>提醒一下</h2>  <div class="tip warning faa-horizontal animated-hover"><p>本教程相当于是我在写笔记</p></div>   <div class="tag link"><a class="link-card" title="北山的图文教程" href="https://beishanair.github.io/2024/07/23/start121/"><div class="left"><img src="/img/siteicon/64.png"/></div><div class="right"><p class="text">北山的图文教程</p><p class="url">https://beishanair.github.io/2024/07/23/start121/</p></div></a></div><ul><li><p>在遇到问题的时候可以选择，先阅读fabricmc官网的文档</p><div class="tag link"><a class="link-card" title="fabricmc" href="https://docs.fabricmc.net/zh_cn/develop/"><div class="left"><img src="/img/siteicon/64.png"/></div><div class="right"><p class="text">fabricmc</p><p class="url">https://docs.fabricmc.net/zh_cn/develop/</p></div></a></div></li><li><p>以及通过工具如AI,chatGPT去搜索一下，或者去必应一下</p></li><li>也可以先去b站搜索一下，b站上有很多大佬，可以去学习一下</li><li>本教程适用于Minecraft 1.21 Fabric的模组开发，不是Java教程。在开始之前也请先学习Java，具有一定的Java基础后再来学习</li><li>在此真诚感谢北山大佬的模组开发教程<div class="tag link"><a class="link-card" title="北山模组教程" href="https://www.bilibili.com/video/BV1Bf421B7XS/"><div class="left"><img src="/img/siteicon/64.png"/></div><div class="right"><p class="text">北山模组教程</p><p class="url">https://www.bilibili.com/video/BV1Bf421B7XS/</p></div></a></div></li></ul><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="安装JDK21"><a href="#安装JDK21" class="headerlink" title="安装JDK21"></a>安装JDK21</h3><p>由于Minecraft从1.20.5开始就采用了Java21来编写，所以说我们开发1.21的模组自然要采用Java21。这里提供的是Oracle JDK21的下载地址，你也可以选择其他JDK21的版本。</p><p>安装的路径一般不用改，除非你C盘真的塞不下了，再改到其他地方去。</p><p>JDK下载安装地址：<a href="https://www.oracle.com/cn/java/technologies/downloads/#java21">JDK21</a></p><h3 id="环境变量配置"><a href="#环境变量配置" class="headerlink" title="环境变量配置"></a>环境变量配置</h3><div class="note info simple"><p>老生常谈</p></div><p>安装好JDK21后，我们需要配置环境变量。其实不配置也可以，但是需要你在IDEA中配置。</p><p>我们先找到系统变量，Win11的位置在：<code>设置</code> -&gt; <code>系统</code> -&gt; <code>系统信息</code> -&gt; <code>高级系统设置</code> -&gt; <code>环境变量</code>。</p><p>然后在系统变量中新建一个<code>JAVA_HOME</code>变量，变量值为你的JDK21的安装路径，如<code>C:\Program Files\Java\jdk-21</code>。</p><p>然后再新建一个<code>CLASSPATH</code>变量，变量值为<code>.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar;</code>。这样就配置好了JDK21的环境变量。</p><h3 id="安装IDEA"><a href="#安装IDEA" class="headerlink" title="安装IDEA"></a>安装IDEA</h3><p>IDEA是一个非常好用的IDE，分<code>专业版</code>和<code>社区版</code>，这里我们就选择社区版就好，反正是免费的。</p><p>IDEA的安装也很简单，直接下载安装包，然后一路下一步就可以了。安装过程中有一步是选择<code>添加&quot;bin&quot;文件夹到PATH</code>，这个选项可以勾选，但需要<code>重启</code>才会生效。</p><p>IDEA下载链接：<a href="https://www.jetbrains.com/idea/download/?section=windows">IDEA</a></p><h3 id="Fabric-开发模板框架文件生成"><a href="#Fabric-开发模板框架文件生成" class="headerlink" title="Fabric 开发模板框架文件生成"></a>Fabric 开发模板框架文件生成</h3><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-minecraft6,1"></use></svg><p>Fabric提供了一个模板框架文件生成器，可以帮助我们快速生成一个Fabric模组的模板文件。</p><p>链接：<a href="https://fabricmc.net/develop/template/">Fabric Template Generator</a></p><p>然后我们来看里面的一些设置：</p><ul><li>Mod Name<br>这个是模组的名字，可以按照你的需求填写，比如TutorialMod。这个名字在生成的文件中，会变成我们的我们之后常说的modid。如果你的模组名字中间有空格，那么生成的文件中会自动把空格替换成-。比如说Tutorial Mod会变成tutorial-mod。</li></ul><p>注意，modid一旦生成就不要乱改，否则会导致模组无法正常运行。</p><ul><li><p>Package Name<br>这个是包名，一般是com.你的名字.模组名。一般就是你的域名倒过来，然后加上模组名。</p></li><li><p>Minecraft Version<br>显然易见，这个是我们要开发的Minecraft版本，这里我们选择1.21.x。</p></li></ul><ul><li><p>Advanced Options<br>勾选<code>Data Generation</code>，这个是生成数据包的，我们后面会用到。</p><p>不勾选<code>Split client and common sources</code>，这个是分离客户端和服务端源码，我们不需要这个，因为我们的模组基本上是在服务端上运行的（假设你开了个服务器加了这个模组），模组内的运算都是在服务器上完成，再发回客户端的。</p><p>另外的两个，其中一个是Kotlin Programming Language，如果你会kotlin，可以勾选。</p><p>另一个是Mojang Mappings，这个是Mojang的官方映射，我们不需要这个，因为我们的模组是基于Fabric的，Fabric已经提供了yarn映射。本教程也是基于Fabric的yarn映射，如果你使用Mojang映射，有些方法名、类名可能会不一样，请自行斟酌。</p><p>一切准备完成后，我们点击下方的下载按钮即可下载模板文件。并将它解压到你的工作目录。</p></li></ul><h2 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h2><p>接下来，我们用IDEA打开我们的项目。然后它将自动进行Gradle建构。此过程强烈建议使用<code>加速器</code>，不然很容易超时导致建构失败。当然，你可以将gradle的下载源改为腾讯的镜像源或其他镜像源</p><ul><li>直接下载gradle<ul><li>通过腾讯镜像站直接下载<code>https://mirrors.cloud.tencent.com/gradle</code>然后设置好环境变量和IDEA里的构建设置后就流畅了</li></ul></li><li>替换镜像源（推荐）<ul><li>打开项目中<br><code>gradle</code>-&gt;<code>wrapper</code>-&gt;<br><code>gradle-warapper.properties</code>配置文件<br>替换<code>distributionUrl</code>的值为镜像站地址如<code>https://mirrors.cloud.tencent.com/gradle/gradle-8.8-bin.zip</code></li></ul></li></ul><h3 id="一些idea的配置"><a href="#一些idea的配置" class="headerlink" title="一些idea的配置"></a>一些idea的配置</h3><p>在等待Gradle建构的时候，我们可以先进行一些小设置。</p><p>IDEA默认是英文的，我们可以安装一个中文插件，这样IDEA的界面就会变成中文的了（虽然我比较喜欢看不懂英语然后受罪）。方法：<code>File</code> -&gt; <code>Settings</code> -&gt; <code>Plugins</code> -&gt; 搜索<code>Chinese ​(Simplified)​ Language Pack / 中文语言包</code> -&gt; 安装。</p><p>AI辅助编程的插件也可以安装一下，这样可以更快地编写代码。方法：<code>File</code> -&gt; <code>Settings</code> -&gt; <code>Plugins</code> -&gt; 搜索<code>Copilot</code>或者<code>CodeGeeX</code> -&gt; 安装。前者是GitHub的AI插件，后者是清华的，也可以选择通义灵码等，如果你购买了Copilot，那么就安装Copilot。</p><p>翻译插件也可以安装一下，这样可以翻译一些英文的文档。方法：<code>File</code>-&gt; <code>Settings</code> -&gt; <code>Plugins</code> -&gt; 搜索<code>Translation</code> -&gt; 安装。</p><h3 id="检查"><a href="#检查" class="headerlink" title="检查"></a>检查</h3><p>当Gradle建构完成后，我们可以检查一下文件是否有问题。看看是否有报错的地方，一般是不会有的。</p><p>检查项目结构：<code>文件</code> -&gt; <code>项目结构</code>，快捷键<code>Ctrl+Alt+Shift+S</code>，检查项目设置的项目中的SDK，是否为JDK21。</p><p>检查Gradle JVM：<code>文件</code> -&gt; <code>设置</code> -&gt; <code>构建、执行、部署</code> -&gt; 构建工具 -&gt; <code>Gradle</code>，检查Gradle JVM是否为JDK21。</p><p>确保以上两个地方都是JDK21，那一般就不会出问题。</p><p>如果运行时出现不支持发行版本21这类问题，基本上是上面两个出问题了，或者JDK21出问题了。</p><h2 id="运行genSource"><a href="#运行genSource" class="headerlink" title="运行genSource"></a>运行genSource</h2><p>这个是Gradle的一个task，我们可以在IDEA的右侧找到<code>Gradle</code>，然后找到<code>Tasks</code> -&gt; <code>fabric</code> -&gt; <code>genSource</code>，然后双击运行即可。这个用于获取源代码的，方便我们查看源代码。<br>这个命令执行完后，会在<code>build/generated/source/genconfig/main</code>目录下生成一个<code>fabric_mod.json</code>文件，这个文件是模组的配置文件，我们可以在这里配置模组的一些信息，比如模组的名称、描述、作者、依赖等。</p><h2 id="其他配置文件"><a href="#其他配置文件" class="headerlink" title="其他配置文件"></a>其他配置文件</h2><ul><li><p>gradle.properties<br>这个文件是Gradle的配置文件，里面有一些Gradle的配置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Done to increase the memory available to gradle.</span><br><span class="line">org.gradle.jvmargs=-Xmx1G</span><br><span class="line">org.gradle.parallel=true</span><br></pre></td></tr></table></figure><p>比如说<code>org.gradle.jvmargs=-Xmx1G</code>，这个是Gradle的最大内存，可以根据自己的电脑配置来调整。</p><p>而<code>org.gradle.parallel=true</code>是并行编译，这个可以加快编译速度。</p></li><li><p>这个是Fabric的配置，我们可以在这里修改Minecraft版本、yarn映射版本、loader版本。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Fabric Properties</span><br><span class="line"># check these on https://fabricmc.net/develop</span><br><span class="line">minecraft_version=1.21</span><br><span class="line">yarn_mappings=1.21+build.1</span><br><span class="line">loader_version=0.15.11</span><br></pre></td></tr></table></figure><p>当版本有更新时，我们可以在这里修改，然后重新建构项目即可。版本信息可以在这里给出的网站上找到。</p></li><li><p>这个是模组的配置，我们可以在这里修改模组的版本、包名、模组名。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Mod Properties</span><br><span class="line">mod_version=0.1-1.21</span><br><span class="line">maven_group=com.besson.tutorialmod</span><br><span class="line">archives_base_name=tutorialmod</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Dependencies</span><br><span class="line">fabric_version=0.100.3+1.21</span><br></pre></td></tr></table></figure><h3 id="build-gradle"><a href="#build-gradle" class="headerlink" title="build.gradle"></a>build.gradle</h3></li><li>这个文件是Gradle的构建文件，里面有一些Gradle的构建配置。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">  id &#x27;fabric-loom&#x27; version &#x27;1.7-SNAPSHOT&#x27;</span><br><span class="line">  id &#x27;maven-publish&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>这个是Gradle的插件，我们可以在这里添加一些插件。而fabric-loom是Fabric的插件，其版本也可以在上面的网站上找到。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">repositories &#123;</span><br><span class="line">  // Add repositories to retrieve artifacts from in here.</span><br><span class="line">  // You should only use this when depending on other mods because</span><br><span class="line">  // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.</span><br><span class="line">  // See https://docs.gradle.org/current/userguide/declaring_repositories.html</span><br><span class="line">  // for more information about repositories.</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">  // To change the versions see the gradle.properties file</span><br><span class="line">  minecraft &quot;com.mojang:minecraft:$&#123;project.minecraft_version&#125;&quot;</span><br><span class="line">  mappings &quot;net.fabricmc:yarn:$&#123;project.yarn_mappings&#125;:v2&quot;</span><br><span class="line">  modImplementation &quot;net.fabricmc:fabric-loader:$&#123;project.loader_version&#125;&quot;</span><br><span class="line"></span><br><span class="line">  // Fabric API. This is technically optional, but you probably want it anyway.</span><br><span class="line">  modImplementation &quot;net.fabricmc.fabric-api:fabric-api:$&#123;project.fabric_version&#125;&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>这个是Gradle的依赖，我们可以在这里添加一些依赖。也是为我们模组添加的依赖，一般的可以被当作lib使用的模组的Wiki中会告诉我们如何添加。后续我们也可以举一些例子。</li></ul><h3 id="LICENSE"><a href="#LICENSE" class="headerlink" title="LICENSE"></a>LICENSE</h3><p>这是许可证文件，也是开源项目所遵循的开源协议文件。我们可以在这里修改许可证的内容。具体的内容你可以自行百度，把他们复制到这个文件中即可。</p><h3 id="fabric-mod-json"><a href="#fabric-mod-json" class="headerlink" title="fabric.mod.json"></a>fabric.mod.json</h3><p>路径是<code>src/main/resources/fabric.mod.json</code>，这个是模组的描述文件，里面有一些模组的信息。<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;schemaVersion&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tutorialmod&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;version&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;TutorialMod&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;这是描述!&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;authors&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;极度天下&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;contact&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;homepage&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://fabricmc.net/&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sources&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://github.com/FabricMC/fabric-example-mod&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CC0-1.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;icon&quot;</span><span class="punctuation">:</span> <span class="string">&quot;assets/tutorialmod/icon.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;environment&quot;</span><span class="punctuation">:</span> <span class="string">&quot;*&quot;</span><span class="punctuation">,</span></span><br><span class="line">  ......</span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><br><code>id</code>是模组的ID，就是<code>modid</code></p><p><code>version</code>是模组的版本，这个是在<code>gradle.properties</code>中配置的</p><p><code>name</code>是模组的名字</p><p><code>description</code>是模组的描述</p><p><code>authors</code>是作者，可以有多个</p><p><code>contact</code>是联系方式，一般是GitHub地址，当然这里还有一个<code>homepage</code>，假设你的模组有一个专门的网站，那可以写上</p><p><code>license</code>是许可证，这个是在<code>LICENSE</code>文件中配置的</p><p><code>icon</code>是模组的图标，这个是在<code>assets/tutorialmod/icon.png</code>中配置的</p><p><code>environment</code>是环境，一般是<code>*</code>，表示所有环境。</p><p>下面，我们要为其中的<code>entrypoints</code>添加一些内容。<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line"><span class="attr">&quot;entrypoints&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;com.jidutianxia.tutorialmod.TutorialMod&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;fabric-datagen&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;com.jidutianxia.tutorialmod.TutorialModDataGenerator&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;client&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;com.jidutianxia.tutorialmod.TutorialModClient&quot;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line">......</span><br></pre></td></tr></table></figure></p><h3 id="TutorialModClient-java"><a href="#TutorialModClient-java" class="headerlink" title="TutorialModClient.java"></a>TutorialModClient.java</h3><p>路径是<code>src/main/java/com/besson/tutorialmod/TutorialModClient.java</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TutorialModClient</span> <span class="keyword">implements</span> <span class="title class_">ClientModInitializer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onInitializeClient</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>这个类要实现<code>ClientModInitializer</code>接口，然后重写<code>onInitializeClient</code>方法。这个方法会在客户端初始化的时候被调用。</p><h3 id="TutorialMod-java"><a href="#TutorialMod-java" class="headerlink" title="TutorialMod.java"></a>TutorialMod.java</h3><p>路径是<code>src/main/java/com/besson/tutorialmod/TutorialMod.java</code>，这个是我们的主类文件，它会在我们游戏启动的时候被调用。我们可以在这里添加一些初始化代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TutorialMod</span> <span class="keyword">implements</span> <span class="title class_">ModInitializer</span> &#123;</span><br><span class="line">  <span class="comment">// This logger is used to write text to the console and the log file.</span></span><br><span class="line">  <span class="comment">// It is considered best practice to use your mod id as the logger&#x27;s name.</span></span><br><span class="line">  <span class="comment">// That way, it&#x27;s clear which mod wrote info, warnings, and errors.</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MOD_ID</span> <span class="operator">=</span> <span class="string">&quot;tutorialmod&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">LOGGER</span> <span class="operator">=</span> LoggerFactory.getLogger(MOD_ID);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onInitialize</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// This code runs as soon as Minecraft is in a mod-load-ready state.</span></span><br><span class="line">    <span class="comment">// However, some things (like resources) may still be uninitialized.</span></span><br><span class="line">    <span class="comment">// Proceed with mild caution.</span></span><br><span class="line"></span><br><span class="line">    ModItems.registerModItems();</span><br><span class="line">    LOGGER.info(<span class="string">&quot;Hello Fabric world!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MODID给单独提出来，这样在后续的代码中，我们可以直接使用<code>TutorialMod.MOD_ID</code>来获取MODID。而MODID也是我们之后用的比较多的字段。<br><code>TutorialMod.MOD_ID</code>在1.21.1之后好像直接给写好了的，反正就是一个公共静态常量</p><h2 id="重新建构"><a href="#重新建构" class="headerlink" title="重新建构"></a>重新建构</h2><p>因为我们改了一些文件，所以我们需要重新建构一下项目。我们可以找到一个大象带一个重新加载的图标，点击它即可进行重构。<br>或者点右边大象点刷新就是</p><h2 id="查看源代码-资源文件"><a href="#查看源代码-资源文件" class="headerlink" title="查看源代码/资源文件"></a>查看源代码/资源文件</h2><p>基本上就是一些idea常用快捷键，用没有用过的都很快上手</p><p>查看源代码，我们可以直接利用IDEA的随处搜索，在IDEA界面的右上角，快捷键<code>double Shift</code>(两下shift)，然后输入我们要查找的类名即可。<br>一些Minecraft的类我们可以按住<code>Ctrl</code>，然后点击类名，就可以直接跳转到Minecraft的源代码中。注意，也许你打开的时候，这个文件的后缀名是<code>.class</code>，我们可以点击<code>选择源</code>，将我们的源代码文件夹选择为一个带<code>source</code>的，一般就是在蹦出来的窗口中，前提是运行了<code>genSource</code>。<br>另外就是最简单粗暴的方法，直接翻<code>外部库</code>。我们找到<code>Gradle: net.minecraft:minecraft-merged-4eb0fe4bb6:1.21-net.fabricmc.yarn.1_21.1.21+build.1-v2</code>。在这个里面，我们可以找到Minecraft的源代码。<code>net</code>文件夹下存放的一般是Minecraft的源代码，我们可以直接查看。<br><code>resource</code>下的<code>assets</code>和<code>data</code>文件也是我们可以查看的东西。assets是资源文件，data是数据文件。</p><h2 id="启动！"><a href="#启动！" class="headerlink" title="启动！"></a>启动！</h2><p>折腾完以后，我们就可以启动我们的游戏了。我们可以在IDEA的右上角的运行中，找到<code>Minecraft Client</code>运行，也可以找到<code>gradle</code>任务中的<code>runClient</code>运行。</p><p>当游戏可以正常运行的时候，那么恭喜你！你已经完成了第一步！</p><h2 id="常见问题F-amp-Q"><a href="#常见问题F-amp-Q" class="headerlink" title="常见问题F&amp;Q"></a>常见问题F&amp;Q</h2><ol><li>Gradle下载慢怎么办？</li></ol><ul><li>可以使用加速器，或者将gradle的下载源改为腾讯、阿里云、清华的镜像源。</li></ul><ol><li>Gradle建构超时</li></ol><ul><li>挂加速器，或者改为腾讯、阿里云、清华的镜像源。</li></ul><ol><li>Gradle建构失败</li></ol><ul><li>删除.gradle文件夹，然后重新建构（IDEA抽风的时候可以试试，一般是索引编制出问题了）。<br>也可以删除C盘的.gradle文件夹，然后重新建构（不过你得重新下载所有gradle文件）。</li></ul><ol><li>不支持发行版本21</li></ol><ul><li>检查JDK21是否配置正确<br>结合上面的检查，检查项目结构和Gradle JVM</li></ul><ol><li>出现net.minecraft.util.InvalidIdentifierException: Non [a-z0-9_.-] …</li></ol><ul><li>只限定在本篇教程中的话，那么一般就是你改动了某些东西，比如说modid，注意modid和其他文件夹不能有大写字母，更不能有中文！</li></ul><ol><li>能不能用其他的IDE</li></ol><ul><li>当然可以，只要你用得习惯，编译器都是一样的。</li></ul><ol><li>能不能用Python写？</li></ol><ul><li>不能！不能！不能！</li><li>这也是我遇到过的最离谱的问题。能问出这个问题的，我只能说你是个人才</li></ul>]]></content>
      
      
      <categories>
          
          <category> Minecraft </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Minecraft </tag>
            
            <tag> 1.21.1模组开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一篇文章</title>
      <link href="/posts/5c2fafc7.html"/>
      <url>/posts/5c2fafc7.html</url>
      
        <content type="html"><![CDATA[<h1 id="第一篇文章"><a href="#第一篇文章" class="headerlink" title="第一篇文章"></a>第一篇文章</h1><h2 id="1-1"><a href="#1-1" class="headerlink" title="1.1"></a>1.1</h2><p>dawd<br>awda<br>awdadaw</p><ol><li>adwaad</li><li>awdawd<ol><li>awdawda</li><li>awdawda<br>1.无敌 </li><li>awdawda</li></ol></li><li>awda sdad<br><img src="{9E1575F4-3E51-4032-9428-771A26FBF186}.png" alt="alt text"></li></ol><div class="table-container"><table><thead><tr><th>awdad</th><th style="text-align:center">DAD</th><th>dawdawd</th></tr></thead><tbody><tr><td>1</td><td style="text-align:center">2</td><td>3</td></tr><tr><td>4</td><td style="text-align:center">5</td><td>6</td></tr></tbody></table></div><ul><li>adaw</li><li>awda<ul><li>dawd</li><li>awdad </li><li>dawd</li><li>awda<ul><li>dawda</li><li>dwa</li></ul></li><li>adwa</li></ul></li><li>dwada </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 标签1 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装Linux操作系统简易图文教程</title>
      <link href="/posts/1350634e.html"/>
      <url>/posts/1350634e.html</url>
      
        <content type="html"><![CDATA[<h1 id="一、下载并安装VMWare-Workstation"><a href="#一、下载并安装VMWare-Workstation" class="headerlink" title="一、下载并安装VMWare Workstation"></a>一、下载并安装VMWare Workstation</h1><h2 id="（一）官网下载"><a href="#（一）官网下载" class="headerlink" title="（一）官网下载"></a>（一）官网下载</h2><ul><li>VMware 官网地址: vmware.com</li><li><p>自从 博通 收购 VMware 后下载变得越发麻烦，所以不推荐官网下载 </p></li><li><p>实在想在官网下载，简单讲一下图文步骤</p></li><li><p>先进入官网直接点击图文选项<img src="https://web-jidutianxia-tlias.oss-cn-chengdu.aliyuncs.com/6fe6a1fd34534c8abf4705c24dd2f490.png" alt=""></p></li><li><p>继续<br><img src="https://web-jidutianxia-tlias.oss-cn-chengdu.aliyuncs.com/49580d73a5e840368fdf27f408f3ccd2.png" alt=""></p></li><li>恭喜进入博通界面，开始坐牢<br><img src="https://web-jidutianxia-tlias.oss-cn-chengdu.aliyuncs.com/889975f36fb8491c800a575e6246df39.png" alt=""></li><li>注册就自行注册，当你注册成功后直接根据图文步骤操作<br><img src="https://web-jidutianxia-tlias.oss-cn-chengdu.aliyuncs.com/22625fd79f9c43548f67335c20fbb10e.png" alt=""><h2 id="（二）其他网络资源下载"><a href="#（二）其他网络资源下载" class="headerlink" title="（二）其他网络资源下载"></a>（二）其他网络资源下载</h2></li><li><p>这是网上找的直链资源下载，来源他人分享，若不适联系删除</p></li><li><p>版本为17.5.2<img src="https://web-jidutianxia-tlias.oss-cn-chengdu.aliyuncs.com/ddf283f8b3bc488bb5990f46ffc868db.png" alt=""></p><ul><li><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/ws/17.5.2/23775571/windows/core/VMware-workstation-17.5.2-23775571.exe.tar">https://softwareupdate.vmware.com/cds/vmw-desktop/ws/17.5.2/23775571/windows/core/VMware-workstation-17.5.2-23775571.exe.tar</a></li></ul></li></ul><ul><li>这是我的百度分享链接,版本也是17.5.2<ul><li>通过网盘分享的文件：VMware17 Pro Setup .exe<br>链接: <a href="https://pan.baidu.com/s/1pkJH-O6Wto_B3hEog1FiWQ?pwd=JDTX">https://pan.baidu.com/s/1pkJH-O6Wto_B3hEog1FiWQ?pwd=JDTX</a> 提取码: JDTX</li></ul></li></ul><h2 id="（三）安装VMWare-Workstation"><a href="#（三）安装VMWare-Workstation" class="headerlink" title="（三）安装VMWare Workstation"></a>（三）安装VMWare Workstation</h2><ul><li>安装没啥好说的都有中文<a href="https://web-jidutianxia-tlias.oss-cn-chengdu.aliyuncs.com/8228cb38c6054083a137a88f96ba884e.png"></a></li></ul><h1 id="二、在VMWare上安装CentOS-7安装CentOS"><a href="#二、在VMWare上安装CentOS-7安装CentOS" class="headerlink" title="二、在VMWare上安装CentOS 7安装CentOS"></a>二、在VMWare上安装CentOS 7安装CentOS</h1><ul><li>下载CentOS 7镜像文件</li><li>推荐镜像源下载就行，清华阿里云等都有镜像源</li><li>下面是我用的阿里云的镜像站<ul><li><a href="https://mirrors.aliyun.com/centos/7/isos/x86_64/">https://mirrors.aliyun.com/centos/7/isos/x86_64/</a></li><li><img src="https://web-jidutianxia-tlias.oss-cn-chengdu.aliyuncs.com/b26881af82574ddba2d87aab4364edec.png" alt=""><h2 id="（一）新建虚拟机"><a href="#（一）新建虚拟机" class="headerlink" title="（一）新建虚拟机"></a>（一）新建虚拟机</h2></li></ul></li><li>单击【创建新的虚拟机】按钮（也可以单击文件菜单下的新建虚拟机）<br><img src="https://web-jidutianxia-tlias.oss-cn-chengdu.aliyuncs.com/66cb950275ad48589d5b1eea5dc0ff16.png" alt=""><br><img src="https://web-jidutianxia-tlias.oss-cn-chengdu.aliyuncs.com/4d647da0997e4dc6a55941ed49e25b42.png" alt="在这里插入图片描述"></li><li>浏览至CentOS.iso文件下载目录<img src="https://web-jidutianxia-tlias.oss-cn-chengdu.aliyuncs.com/9fc8eda5e6f54892a4a4c63bb35f9686.png" alt="在这里插入图片描述"></li><li>用户名不能为root<img src="https://web-jidutianxia-tlias.oss-cn-chengdu.aliyuncs.com/61522e1b3fd942da816bc309f2f7060f.png" alt="在这里插入图片描述"></li><li>位置自己选择<img src="https://web-jidutianxia-tlias.oss-cn-chengdu.aliyuncs.com/1d6e99451b1c46b7bfcd6214f08dc0a4.png" alt="在这里插入图片描述"></li><li>文件拆分看自己需求<img src="https://web-jidutianxia-tlias.oss-cn-chengdu.aliyuncs.com/7a18a5001d614b9da9325fd67a34e1a1.png" alt="在这里插入图片描述"></li><li>准备就绪，单击完成<img src="https://web-jidutianxia-tlias.oss-cn-chengdu.aliyuncs.com/77a370050ca3420eb218841c3986b86a.png" alt="在这里插入图片描述"></li><li><p>按下Enter进行安装<br><img src="https://web-jidutianxia-tlias.oss-cn-chengdu.aliyuncs.com/d365ff617b1147d193f03e550aea805f.png" alt="在这里插入图片描述"></p></li><li><p>选择操作系统语言（最好采用默认的英语），初学者可以采用中文过渡适应一下，如图<img src="https://web-jidutianxia-tlias.oss-cn-chengdu.aliyuncs.com/a2bcaa971b7b4b498f781e644f369f4f.png" alt="在这里插入图片描述"></p></li><li>这里后续采用中文，本地化配置一下日期与时间就行<img src="https://web-jidutianxia-tlias.oss-cn-chengdu.aliyuncs.com/24abab540d5f4be6a850a4271b23b0e7.png" alt="在这里插入图片描述"></li><li>中国范围内选上海（只有），24小时制，完成<img src="https://web-jidutianxia-tlias.oss-cn-chengdu.aliyuncs.com/6bf5f1782cf64d3499a0e6301c96abb8.png" alt="在这里插入图片描述"></li><li>【软件】中只配置软件选择<br><img src="https://web-jidutianxia-tlias.oss-cn-chengdu.aliyuncs.com/9cc4996b17e84f23942fd26b4a8350a7.png" alt="在这里插入图片描述"></li><li>最小安装就行，没图形化设计，没界面<img src="https://web-jidutianxia-tlias.oss-cn-chengdu.aliyuncs.com/790c0a653bb4438aa5b8413143cf7c4f.png" alt="在这里插入图片描述"></li><li>系统中只配置安装位置，系统分区<br><img src="https://web-jidutianxia-tlias.oss-cn-chengdu.aliyuncs.com/f1e8c814661f4b849b55e037a1ef0d90.png" alt="在这里插入图片描述"></li><li>选好盘，自行分区后，点击 完成<br><img src="https://web-jidutianxia-tlias.oss-cn-chengdu.aliyuncs.com/9e86563da1fb47039408185467aa50a3.png" alt="在这里插入图片描述"></li><li>手动分区选择标准分区方案，然后点击下面的“+”添加分区。<br><img src="https://web-jidutianxia-tlias.oss-cn-chengdu.aliyuncs.com/dd7b618371294c69a71018928e8033fb.png" alt="在这里插入图片描述"><br><img src="https://web-jidutianxia-tlias.oss-cn-chengdu.aliyuncs.com/471e229a306f4a24b22ec2f005e0400d.png" alt="在这里插入图片描述"></li></ul><p><img src="https://web-jidutianxia-tlias.oss-cn-chengdu.aliyuncs.com/a911bf386e764c2ebc5e5797c373d99e.png" alt="在这里插入图片描述"></p><ul><li>增加根分区，表示所有空间大小，这里不填写大小<br><img src="https://web-jidutianxia-tlias.oss-cn-chengdu.aliyuncs.com/0df1fd33609b46f49aa1ab9dd28d58ea.png" alt="在这里插入图片描述"></li><li><p>最后如图，点击完成<br><img src="https://web-jidutianxia-tlias.oss-cn-chengdu.aliyuncs.com/16f78cd1aaf34e4f8163f6dab406f8cb.png" alt="在这里插入图片描述">- 点击接受<img src="https://web-jidutianxia-tlias.oss-cn-chengdu.aliyuncs.com/0e7142fc3ac54697982bf6aeb29051ab.png" alt="在这里插入图片描述"></p></li><li><p>点击开始安装<img src="https://web-jidutianxia-tlias.oss-cn-chengdu.aliyuncs.com/6cfc668937364931b5bcb1689f6f82a4.png" alt="在这里插入图片描述"></p></li><li>设置最高权限管理员root密码，这个密码非常重要！！！<br><img src="https://web-jidutianxia-tlias.oss-cn-chengdu.aliyuncs.com/59a44263b3f14d0d9f5632318afc275a.png" alt="在这里插入图片描述">- 创建用户，就是普通用户，权限较低，想创建也行<br><img src="https://web-jidutianxia-tlias.oss-cn-chengdu.aliyuncs.com/fa2d576a53064f0aa1fb06c2904c0d7d.png" alt="在这里插入图片描述"></li><li>安装完成后，点击 完成配置<img src="https://web-jidutianxia-tlias.oss-cn-chengdu.aliyuncs.com/cc227c20a6e7432cbe89488b75dab614.png" alt="在这里插入图片描述"></li><li>接下来我们使用root账号登录，密码是默认是不可见的</li><li>出现<code>[root@localhost]#</code>提示符，表明登录成功<img src="https://web-jidutianxia-tlias.oss-cn-chengdu.aliyuncs.com/557cadca93c04c0098268a57b3e5ada3.png" alt="在这里插入图片描述"></li><li>至此，CentOS7的安装全部完成了。<h1 id="三、CentOS7的网络配置"><a href="#三、CentOS7的网络配置" class="headerlink" title="三、CentOS7的网络配置"></a>三、CentOS7的网络配置</h1><h2 id="（一）查看ip"><a href="#（一）查看ip" class="headerlink" title="（一）查看ip"></a>（一）查看ip</h2></li><li>执行命令：<code>ip addr</code></li><li><img src="https://web-jidutianxia-tlias.oss-cn-chengdu.aliyuncs.com/256540847d7d4344b5d207c6825b5049.png" alt="在这里插入图片描述"></li><li>执行命令：<code>ping www.baidu.com</code>，无法访问外网的<img src="https://web-jidutianxia-tlias.oss-cn-chengdu.aliyuncs.com/0700167ee66e40a4a5a8dcb021356abb.png" alt="在这里插入图片描述"><h2 id="（二）配置静态ip-推荐"><a href="#（二）配置静态ip-推荐" class="headerlink" title="（二）配置静态ip(推荐"></a>（二）配置静态ip(推荐</h2><h3 id="1、修改网卡配置文件"><a href="#1、修改网卡配置文件" class="headerlink" title="1、修改网卡配置文件"></a>1、修改网卡配置文件</h3></li><li>点击 编辑 里面的 虚拟网络编辑器<img src="https://web-jidutianxia-tlias.oss-cn-chengdu.aliyuncs.com/275e1b777c5f45bd8cc9bfbd1542bde2.png" alt="在这里插入图片描述"></li><li>一般默认就好<br><img src="https://web-jidutianxia-tlias.oss-cn-chengdu.aliyuncs.com/376ec8e56bd54850b4a7e84c25e13095.png" alt="在这里插入图片描述"></li><li><p>子网IP同网段下的网关IP前三位相同，192.168.1要相同，最后一位数不相同即可<br><img src="https://web-jidutianxia-tlias.oss-cn-chengdu.aliyuncs.com/3b919d043eac40a49c37f31ffdcf533c.png" alt="在这里插入图片描述"></p></li><li><p>执行命令：<code>vi /etc/sysconfig/network-scripts/ifcfg-ens33</code></p><ul><li>按<code>i</code>进入INSERT模式进行修改<br><img src="https://web-jidutianxia-tlias.oss-cn-chengdu.aliyuncs.com/bce8d141ec2b41b696f788b240d9b6b8.png" alt="在这里插入图片描述"></li></ul></li><li>BOOTPROTO=static<br>ONBOOT=yes<br>IPADDR=192.168.1.100<br>NETMASK=255.255.255.0<br>PREFIX=24<br>GATEWAY=192.168.1.2<br>DNS1=114.114.114.114</li><li>修改后如图所示<ul><li><code>Esc</code>退出当前模式</li><li><code>:wq</code> 保存并退出</li><li>注意，IPADDR=192.168.1.100，跟虚拟网络编辑器里设置的网段必须保持一致<br><img src="https://web-jidutianxia-tlias.oss-cn-chengdu.aliyuncs.com/308c34a5b54a4819bbfba39654500945.png" alt="在这里插入图片描述"><h3 id="2、重启网络服务"><a href="#2、重启网络服务" class="headerlink" title="2、重启网络服务"></a>2、重启网络服务</h3></li></ul></li><li>执行命令：<code>systemctl start network</code><h3 id="3、重启虚拟机"><a href="#3、重启虚拟机" class="headerlink" title="3、重启虚拟机"></a>3、重启虚拟机</h3></li><li>执行命令：<code>reboot</code><h3 id="4、查看修改后的ip"><a href="#4、查看修改后的ip" class="headerlink" title="4、查看修改后的ip"></a>4、查看修改后的ip</h3></li><li>执行命令：<code>ip addr</code></li></ul><p><img src="https://web-jidutianxia-tlias.oss-cn-chengdu.aliyuncs.com/01b08152f464417da345586a5de1bde5.png" alt="在这里插入图片描述"></p><h3 id="5、测试虚拟机能否Ping通外网"><a href="#5、测试虚拟机能否Ping通外网" class="headerlink" title="5、测试虚拟机能否Ping通外网"></a>5、测试虚拟机能否Ping通外网</h3><ul><li>执行命令：<code>ping www.baidu.com</code><ul><li><code>Ctrl</code> + <code>C</code> 停止<br><img src="https://web-jidutianxia-tlias.oss-cn-chengdu.aliyuncs.com/ad46c8de6de544b8b20d203fa33c1e61.png" alt="在这里插入图片描述"></li></ul></li><li>至此静态ip配置完成，可以访问外网了</li></ul><h1 id="四、测试宿主机与虚拟机能否相互通信"><a href="#四、测试宿主机与虚拟机能否相互通信" class="headerlink" title="四、测试宿主机与虚拟机能否相互通信"></a>四、测试宿主机与虚拟机能否相互通信</h1><h2 id="一-测试宿主机能否ping通虚拟机"><a href="#一-测试宿主机能否ping通虚拟机" class="headerlink" title="(一)测试宿主机能否ping通虚拟机"></a>(一)测试宿主机能否ping通虚拟机</h2><ul><li>打开宿主机命令窗口，执行命令：ping 192.168.1.100</li></ul><p><img src="https://web-jidutianxia-tlias.oss-cn-chengdu.aliyuncs.com/11ec9f5a671e4f7597202def1c02c1ca.png" alt="在这里插入图片描述"></p><h2 id="（二）测试虚拟机能否ping通宿主机"><a href="#（二）测试虚拟机能否ping通宿主机" class="headerlink" title="（二）测试虚拟机能否ping通宿主机"></a>（二）测试虚拟机能否ping通宿主机</h2><ul><li>查看网络连接详细信息，宿主机IPv4地址<ul><li>cmd 中输入<code>ipconfig/all</code><br><img src="https://web-jidutianxia-tlias.oss-cn-chengdu.aliyuncs.com/89b62b9c129549599466464a49a330e7.png" alt="在这里插入图片描述"></li></ul></li><li>如果虚拟机无法 ping通 宿主机 可以尝试关闭防火墙再进行</li></ul><h1 id="五、FinalShell访问虚拟机"><a href="#五、FinalShell访问虚拟机" class="headerlink" title="五、FinalShell访问虚拟机"></a>五、FinalShell访问虚拟机</h1><h2 id="（一）下载FinalShell"><a href="#（一）下载FinalShell" class="headerlink" title="（一）下载FinalShell"></a>（一）下载FinalShell</h2><ul><li>下载地址：<code>https://www.hostbuf.com/t/988.html</code><h2 id="（二）安装FinalShell"><a href="#（二）安装FinalShell" class="headerlink" title="（二）安装FinalShell"></a>（二）安装FinalShell</h2></li><li>安装程序</li><li>接受-下一步-完成<br><img src="https://web-jidutianxia-tlias.oss-cn-chengdu.aliyuncs.com/dbe4a857e55e4dcb82cc17773ce78535.png" alt="在这里插入图片描述"><h2 id="（三）启动FinalShell"><a href="#（三）启动FinalShell" class="headerlink" title="（三）启动FinalShell"></a>（三）启动FinalShell</h2></li><li><p>打开应用程序<img src="https://web-jidutianxia-tlias.oss-cn-chengdu.aliyuncs.com/c1e9592df3414f8490ff3674eebfd7b5.png" alt="在这里插入图片描述"></p><h2 id="（四）创建SSH连接"><a href="#（四）创建SSH连接" class="headerlink" title="（四）创建SSH连接"></a>（四）创建SSH连接</h2></li><li><p>打开连接管理器<img src="https://web-jidutianxia-tlias.oss-cn-chengdu.aliyuncs.com/e2c9d07a0e5f4d94ac66b20fdc58d0a5.png" alt="在这里插入图片描述"></p></li><li>单击工具栏上第一个按钮SSH连接<img src="https://web-jidutianxia-tlias.oss-cn-chengdu.aliyuncs.com/2fe7c9d01b034d2388791edce1fb64b3.png" alt="在这里插入图片描述"></li><li>点击确定后，双击连接<br><img src="https://web-jidutianxia-tlias.oss-cn-chengdu.aliyuncs.com/97b255e86dce4759a04fee72cddc3d0b.png" alt="在这里插入图片描述"></li><li>单击【接受并保存】按钮<img src="https://web-jidutianxia-tlias.oss-cn-chengdu.aliyuncs.com/c434cf22284f43988a135c003de1ebcb.png" alt="在这里插入图片描述"><h2 id="（五）设置虚拟主机名"><a href="#（五）设置虚拟主机名" class="headerlink" title="（五）设置虚拟主机名"></a>（五）设置虚拟主机名</h2></li><li>组合键<code>Ctrl</code> +<code>L</code>可以清屏<h3 id="1、查看虚拟机的主机名"><a href="#1、查看虚拟机的主机名" class="headerlink" title="1、查看虚拟机的主机名"></a>1、查看虚拟机的主机名</h3></li><li>执行命令：<code>hostname</code><img src="https://web-jidutianxia-tlias.oss-cn-chengdu.aliyuncs.com/40c7a10a143047199bf6ef72e8ff6806.png" alt="在这里插入图片描述"></li><li>执行命令：<code>cat /etc/hostname</code> 也能查看静态主机名<h3 id="2、修改虚拟机静态主机名"><a href="#2、修改虚拟机静态主机名" class="headerlink" title="2、修改虚拟机静态主机名"></a>2、修改虚拟机静态主机名</h3></li><li><p>临时修改</p><ul><li>执行命令：<code>hostname ied</code>（重启虚拟机之后，主机名又恢复）</li></ul></li><li>永久修改<ul><li>执行命令：<code>hostnamectl set-hostname ied</code><img src="https://web-jidutianxia-tlias.oss-cn-chengdu.aliyuncs.com/904cad7db2e940d9af3f86fcab6b5c91.png" alt="在这里插入图片描述"></li></ul></li><li>重启虚拟机 <code>reboot</code></li><li>命令行提示符有了变化：[root@ied ~]#<img src="https://web-jidutianxia-tlias.oss-cn-chengdu.aliyuncs.com/ca6513685395442180cb661d13d067a1.png" alt="在这里插入图片描述"><h2 id="（六）配置域名解析服务器"><a href="#（六）配置域名解析服务器" class="headerlink" title="（六）配置域名解析服务器"></a>（六）配置域名解析服务器</h2></li><li>执行命令：<code>vi /etc/resolv.conf</code>，添加两个域名服务器<ul><li>nameserver 8.8.8.8</li><li>nameserve 114.114.114.114</li><li><img src="https://web-jidutianxia-tlias.oss-cn-chengdu.aliyuncs.com/c86fe68052cd43b9aba2f75588c03a71.png" alt="在这里插入图片描述"><h2 id="（七）使用镜像站"><a href="#（七）使用镜像站" class="headerlink" title="（七）使用镜像站"></a>（七）使用镜像站</h2></li></ul></li><li>阿里云镜像站地址：<code>https://developer.aliyun.com/mirror/</code></li><li>执行命令<code>curl -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo</code><img src="https://web-jidutianxia-tlias.oss-cn-chengdu.aliyuncs.com/6711583e07b24edcbf4a7915c0a338eb.png" alt="在这里插入图片描述"></li></ul><h2 id="（八）安装vim编辑器"><a href="#（八）安装vim编辑器" class="headerlink" title="（八）安装vim编辑器"></a>（八）安装vim编辑器</h2><ul><li><code>yum -y install vim</code><img src="https://web-jidutianxia-tlias.oss-cn-chengdu.aliyuncs.com/16fa1f8e225a4cceab91ffa8d7347c52.png" alt="在这里插入图片描述"><h2 id="（九）做IP地址与主机名的映射"><a href="#（九）做IP地址与主机名的映射" class="headerlink" title="（九）做IP地址与主机名的映射"></a>（九）做IP地址与主机名的映射</h2><h3 id="1、修改域名映射文件"><a href="#1、修改域名映射文件" class="headerlink" title="1、修改域名映射文件"></a>1、修改域名映射文件</h3></li><li>执行命令：<code>vim /etc/hosts</code><img src="https://web-jidutianxia-tlias.oss-cn-chengdu.aliyuncs.com/69601ba16db247dea3fe7e7642c0ed73.png" alt="在这里插入图片描述"></li><li>可以添加一个映射<img src="https://web-jidutianxia-tlias.oss-cn-chengdu.aliyuncs.com/68d5c585f659480ba68f0612af42b69f.png" alt="在这里插入图片描述"></li><li>以后另一个虚拟机，就可以通过ping ied命令来ping通该虚拟机，</li><li>也可以修改Windows的hosts文件实现宿主机通过虚拟机主机名来ping通</li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> VMW </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
